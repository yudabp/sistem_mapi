<?php

namespace App\Services;

use App\Models\KeuanganPerusahaan;
use App\Models\BukuKasKebun;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\DB;

class FinancialTransactionService
{
    /**
     * Create KP transaction (BKK auto-creation handled by observer)
     *
     * @param  array  $data
     * @return array
     */
    public function createKpWithAutoBkk(array $data)
    {
        try {
            DB::beginTransaction();

            // Create KP transaction - BKK will be auto-created by observer
            $kpTransaction = KeuanganPerusahaan::create([
                'transaction_date' => $data['transaction_date'],
                'transaction_number' => 'KP' . date('Ymd') . rand(1000, 9999),
                'transaction_type' => $data['transaction_type'],
                'amount' => $data['amount'],
                'source_destination' => $data['source_destination'],
                'received_by' => $data['received_by'],
                'proof_document_path' => $data['proof_document_path'] ?? null,
                'notes' => $data['notes'] ?? null,
                'category' => $data['category'],
            ]);

            DB::commit();

            // Check if BKK was auto-created by observer (for expense transactions)
            $bkkTransaction = null;
            if ($data['transaction_type'] === 'expense') {
                $bkkTransaction = BukuKasKebun::where('kp_id', $kpTransaction->id)->first();
            }

            Log::info('Created KP transaction', [
                'kp_id' => $kpTransaction->id,
                'kp_transaction_number' => $kpTransaction->transaction_number,
                'bkk_id' => $bkkTransaction?->id,
                'bkk_transaction_number' => $bkkTransaction?->transaction_number,
                'amount' => $data['amount'],
                'transaction_type' => $data['transaction_type'],
            ]);

            return [
                'success' => true,
                'kp_transaction' => $kpTransaction,
                'bkk_transaction' => $bkkTransaction,
                'message' => $bkkTransaction 
                    ? 'KP transaction created successfully with auto-generated BKK entry.'
                    : 'KP transaction created successfully.'
            ];

        } catch (\Exception $e) {
            DB::rollBack();
            
            Log::error('Failed to create KP transaction', [
                'data' => $data,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString(),
            ]);

            return [
                'success' => false,
                'error' => $e->getMessage(),
                'message' => 'Failed to create transaction. Please try again.'
            ];
        }
    }

    /**
     * Get BKK transactions related to a KP transaction
     *
     * @param  int  $kpId
     * @return \Illuminate\Database\Eloquent\Collection
     */
    public function getRelatedBkkTransactions($kpId)
    {
        return BukuKasKebun::where('kp_id', $kpId)
            ->orderBy('transaction_date', 'desc')
            ->get();
    }

    /**
     * Get KP transaction related to a BKK transaction
     *
     * @param  int  $bkkId
     * @return \App\Models\KeuanganPerusahaan|null
     */
    public function getRelatedKpTransaction($bkkId)
    {
        $bkkTransaction = BukuKasKebun::find($bkkId);
        return $bkkTransaction?->keuanganPerusahaan;
    }

    /**
     * Check if BKK transaction was auto-generated from KP
     *
     * @param  int  $bkkId
     * @return bool
     */
    public function isAutoGeneratedBkk($bkkId)
    {
        $bkkTransaction = BukuKasKebun::find($bkkId);
        return $bkkTransaction && $bkkTransaction->kp_id !== null && 
               str_contains($bkkTransaction->transaction_number, 'BKK-AUTO');
    }

    /**
     * Map KP category to BKK category
     *
     * @param  string  $kpCategory
     * @return string
     */
    private function mapKpCategoryToBkkCategory($kpCategory)
    {
        $categoryMapping = [
            // KP categories that map to BKK operational categories
            'Personnel Cost' => 'Operational Cost',
            'Administrative Cost' => 'Operational Cost',
            'Financial Cost' => 'Operational Cost',
            'Investment' => 'Operational Cost',
            'Other Expense' => 'Operational Cost',
            
            // Default mapping
            'default' => 'Other Income',
        ];

        return $categoryMapping[$kpCategory] ?? $categoryMapping['default'];
    }
}